#Make panorama image using homography
import cv2
import os
import numpy as np
from matplotlib import pyplot as plt

#calcluate Homography
def find_homo(imgA, imgB):
    surf = cv2.xfeatures2d.SURF_create()
    kpA, desA = surf.detectAndCompute(imgA, None)
    kpB, desB = surf.detectAndCompute(imgB, None)
    bf = cv2.BFMatcher()
    matches = bf.knnMatch(desA, desB, k=2)
    match_point = []
    matA = []
    matB = []

    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            match_point.append([m])
            matA.append(kpA[m.queryIdx])
            matB.append(kpB[m.trainIdx])
    ptsA = np.float32([m.pt for m in matA])
    ptsB = np.float32([m.pt for m in matB])
    H, status = cv2.findHomography(ptsB, ptsA, cv2.RANSAC, 3.0)
    return H

def make_homo(h, imgA, imgB):
    homo = np.ones((3,1))
    homo[0, 0] = imgB.shape[1] / 2
    homo[1, 0] = imgB.shape[0] / 2
    new_homo = np.dot(h, homo)
    for i in range(new_homo.shape[0]):
        new_homo[i, 0] = new_homo[i, 0] / new_homo[2, 0]
    dx = int(new_homo[0, 0] - homo[0, 0] / 2)
    print(dx)
    #imgB is located to the left of imgA
    if dx < 0:
        # dx is negative
        dx = np.absolute(dx)
        y = imgA.shape[0]
        x = imgA.shape[1] + dx
 

        # If imgB moves only by -dx, a part smaller than 0 is deleted
        # A new new_h is generated by moving an existing homography by dx minutes
        new_h = np.array([[1, 0, dx], [0, 1, 0], [0, 0, 1]], np.float32)
        h = np.dot(new_h, h)

        trans_imgB = cv2.warpPerspective(imgB, h, (x, y))
        new_img = np.zeros((y, x, 3), np.uint8)
        pano = np.zeros((y, x, 3), np.uint8)
        for i in range(3):
            new_img[:, dx:, i] = imgA[:, :, i]

        ret, data_map = cv2.threshold(cv2.cvtColor(new_img, cv2.COLOR_BGR2GRAY), 0, 255, cv2.THRESH_BINARY)
        #Assign a value of B to only the portion of A's value is 0
        pano = cv2.add(pano, trans_imgB, mask = np.bitwise_not(data_map), dtype = cv2.CV_8U)
        w = 0
        h = 0
        for i in panorama:
            w = w + 1
            for j in i:
                h = h + 1
                panorama[w][imgA.shape[1]][0] = (panorama[w][imgA.shape[1]-1][0] + panorama[w][imgA.shape[1]+1][0])  / 2
                panorama[w][imgA.shape[1]][1] = (panorama[w][imgA.shape[1]-1][1] + panorama[w][imgA.shape[1]+1][1])  / 2
                panorama[w][imgA.shape[1]][2] = (panorama[w][imgA.shape[1]-1][2] + panorama[w][imgA.shape[1]+1][2])  / 2

        panorama = cv2.add(pano, new_img, dtype = cv2.CV_8U)
    else:
        trans_imgB = cv2.warpPerspective(imgB, h, (imgB.shape[1] + dx, imgB.shape[0]))

        y = imgB.shape[0]
        x = imgB.shape[1] + dx
        
        new_img = np.zeros((y, x, 3), np.uint8)
        pano = np.zeros((y, x, 3), np.uint8)

        for i in range(3):
            new_img[:, :imgA.shape[1], i] = imgA[:, :imgA.shape[1], i]
        ret, data_map = cv2.threshold(cv2.cvtColor(new_img, cv2.COLOR_BGR2GRAY), 0, 255, cv2.THRESH_BINARY)
        pano = cv2.add(pano, trans_imgB, mask = np.bitwise_not(data_map), dtype = cv2.CV_8U)
        panorama = cv2.add(pano, new_img, dtype=cv2.CV_8U)
        w = 0
        h = 0
        for i in panorama:
            w = w + 1
            for j in i:
                h = h + 1
                panorama[imgA.shape[1]][h][0] = (panorama[imgA.shape[1]-1][h][0] + panorama[imgA.shape[1]+1][h][0])  / 2
                panorama[imgA.shape[1]][h][1] = (panorama[imgA.shape[1]-1][h][1] + panorama[imgA.shape[1]+1][h][1])  / 2
                panorama[imgA.shape[1]][h][2] = (panorama[imgA.shape[1]-1][h][2] + panorama[imgA.shape[1]+1][h][2])  / 2

    return panorama

imgA = cv2.imread("cafe1.jpg")
imgB = cv2.imread("cafe2.jpg")
imgC = cv2.imread("cafe3.jpg")
imgD = cv2.imread("cafe4.jpg")

H = find_homo(imgA, imgB)
temp_img = make_homo(H, imgA, imgB)

H = find_homo(temp_img, imgC)
temp_img = make_homo(H, temp_img, imgC)

H = find_homo(temp_img, imgD)
result_img = make_homo(H, temp_img, imgD)


#cv2 -> BGR image
plt.subplot(241),plt.imshow(cv2.cvtColor(imgA, cv2.COLOR_BGR2RGB))
plt.title("Image 1"), plt.xticks([]), plt.yticks([])

plt.subplot(242),plt.imshow(cv2.cvtColor(imgB, cv2.COLOR_BGR2RGB))
plt.title("Image 2"), plt.xticks([]), plt.yticks([])

plt.subplot(243),plt.imshow(cv2.cvtColor(imgC, cv2.COLOR_BGR2RGB))
plt.title("Image 3"), plt.xticks([]), plt.yticks([])

plt.subplot(244),plt.imshow(cv2.cvtColor(imgD, cv2.COLOR_BGR2RGB))
plt.title("Image 4"), plt.xticks([]), plt.yticks([])

plt.subplot(212),plt.imshow(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))
plt.title("Panorama Image"), plt.xticks([]), plt.yticks([])

plt.show()

cv2.imshow("panorama", result_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

